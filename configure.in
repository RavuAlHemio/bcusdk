AC_PREREQ(2.59)

AC_INIT(bcusdk, 0.0.1)
AM_INIT_AUTOMAKE

AC_CANONICAL_HOST
AC_PROG_CC
AC_PROG_CXX
AC_STDC_HEADERS
AC_PROG_YACC
AC_PROG_LEX
AM_PROG_AS
AC_PROG_RANLIB
AC_CHECK_PTH(2.0.3,yes,yes,yes)

AC_ARG_ENABLE(ft12,
[  --enable-ft12		enable FT1.2 backend],
[case "${enableval}" in
 yes) ft12=true ;;
  no)  ft12=false ;;
   *) AC_MSG_ERROR(bad value ${enableval} for --enable-ft12) ;;
 esac],[ft12=false])
AM_CONDITIONAL(HAVE_FT12, test x$ft12 = xtrue)
if test x$ft12 = xtrue ; then
 AC_DEFINE(HAVE_FT12, 1 , [FT1.2 enabled])
fi

AC_ARG_ENABLE(pei16,
[  --enable-pei16	enable BCU1 kernel driver backend],
[case "${enableval}" in
 yes) pei16=true ;;
  no)  pei16=false ;;
   *) AC_MSG_ERROR(bad value ${enableval} for --enable-pei16) ;;
 esac],[pei16=false])
AM_CONDITIONAL(HAVE_PEI16, test x$pei16 = xtrue)
if test x$pei16 = xtrue; then
 AC_DEFINE(HAVE_PEI16, 1 , [PEI16 enabled])
fi

AC_ARG_ENABLE(tpuart,
[  --enable-tpuart	enable TPUART kernel driver backend],
[case "${enableval}" in
 yes) tpuart=true ;;
  no)  tpuart=false ;;
   *) AC_MSG_ERROR(bad value ${enableval} for --enable-tpuart) ;;
 esac],[tpuart=false])
AM_CONDITIONAL(HAVE_TPUART, test x$tpuart = xtrue)
if test x$tpuart = xtrue ; then
 AC_DEFINE(HAVE_TPUART, 1 , [TPUART enabled])
fi

AC_ARG_ENABLE(pei16s,
[  --enable-pei16s	enable BCU1 user driver backend (very experimental)],
[case "${enableval}" in
 yes) pei16s=true ;;
  no)  pei16s=false ;;
   *) AC_MSG_ERROR(bad value ${enableval} for --enable-pei16s) ;;
 esac],[pei16s=false])
AM_CONDITIONAL(HAVE_PEI16s, test x$pei16s = xtrue)
if test x$pei16s = xtrue ; then
 AC_DEFINE(HAVE_PEI16s, 1 , [PEI16s enabled])
fi

AC_ARG_ENABLE(tpuarts,
[  --enable-tpuarts	enable TPUART user driver backend (experimental)],
[case "${enableval}" in
 yes) tpuarts=true ;;
  no)  tpuarts=false ;;
   *) AC_MSG_ERROR(bad value ${enableval} for --enable-tpuarts) ;;
 esac],[tpuarts=false])
AM_CONDITIONAL(HAVE_TPUARTs, test x$tpuarts = xtrue)
if test x$tpuarts = xtrue ; then
 AC_DEFINE(HAVE_TPUARTs, 1 , [TPUARTs enabled])
fi

AC_ARG_ENABLE(eibnetip,
[  --enable-eibnetip	enable EIBnet/IP routing backend],
[case "${enableval}" in
 yes) eibnetip=true ;;
  no)  eibnetip=false ;;
   *) AC_MSG_ERROR(bad value ${enableval} for --enable-eibnetip) ;;
 esac],[eibnetip=false])
AM_CONDITIONAL(HAVE_EIBNETIP, test x$eibnetip = xtrue)
if test x$eibnetip = xtrue ; then
 AC_DEFINE(HAVE_EIBNETIP, 1 , [EIBnet/IP enabled])
fi

AC_CONFIG_HEADERS(config.h)
AC_OUTPUT(Makefile 
eibd/Makefile eibd/include/Makefile  eibd/client/Makefile eibd/examples/Makefile eibd/libserver/Makefile eibd/server/Makefile eibd/backend/Makefile
xml/Makefile
)

